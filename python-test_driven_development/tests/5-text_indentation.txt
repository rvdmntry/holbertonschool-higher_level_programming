============================================
How to Use 5-text_indentation.py
============================================

This module defines a text-indentation function ``text_indentation(text)``.

Usage
=====

The function prints text with 2 new lines after each of these characters: ., ?, :

::

    >>> text_indentation = __import__('5-text_indentation').text_indentation

==============

SUCCESS CASES
==============

Test 1: Normal input.
>>> text_indentation("A wizard is never late Frodo Baggins. Nor is he early? He arrives precisely when he means to.")
A wizard is never late Frodo Baggins.
<BLANKLINE>
Nor is he early?
<BLANKLINE>
He arrives precisely when he means to.
<BLANKLINE>

Test 2: Space at the beginning.
>>> text_indentation("  Bilbo Baggins. Of the Shires.")
Bilbo Baggins.
<BLANKLINE>
Of the Shires.
<BLANKLINE>

Test 3: Single string, no newline.
>>> text_indentation("Gandalf")
Gandalf

Test 4: Some ignore.
>>> text_indentation(" Hello: There ")
Hello:
<BLANKLINE>
There

Test 5: With "." and "?"
>>> text_indentation("Hola?.")
Hola?
<BLANKLINE>
.
<BLANKLINE>

==========================
CASES THAT SHOULD NOT WORK
==========================

Test 6: None.
>>> text_indentation(None)
Traceback (most recent call last):
...
TypeError: text must be a string

Test 7: Add int.
>>> text_indentation(5)
Traceback (most recent call last):
...
TypeError: text must be a string

Test 8: Negative int.
>>> text_indentation(-2)
Traceback (most recent call last):
...
TypeError: text must be a string

Test 9: Float.
>>> text_indentation(2.4)
Traceback (most recent call last):
...
TypeError: text must be a string

Test 10: Negative float.
>>> text_indentation(-3.2)
Traceback (most recent call last):
...
TypeError: text must be a string

Test 11: No args.
>>> text_indentation()
Traceback (most recent call last):
...
TypeError: text_indentation() missing 1 required positional argument: 'text'
